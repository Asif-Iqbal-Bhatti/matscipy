# This is partially adopted from scipy.
# See: https://github.com/scipy/scipy/blob/main/.github/workflows/wheels.yml
# License: 3-clause BSD, https://github.com/scipy/scipy/blob/main/LICENSE.txt

name: Build wheels

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
    tags:
      - v*
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheel for ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }} ${{ matrix.buildplat[2] }}
    runs-on: ${{ matrix.buildplat[0] }}
    strategy:
      matrix:
        # Github Actions doesn't support pairing matrix values together, let's improvise
        # https://github.com/github/feedback/discussions/7835#discussioncomment-1769026
        buildplat:
        # should also be able to do multi-archs on a single entry, e.g.
        # [windows-2019, win*, "AMD64 x86"]. However, those two require a different compiler setup
        # so easier to separate out here.
        - [ubuntu-20.04, manylinux, x86_64]

        # When the macos-10.15 image is retired the gfortran/openblas chain
        # may have to be reworked because the gfortran-4.9.0 compiler currently
        # used in CI doesn't work in the macos-11.0 image. This will require a more
        # recent gfortran (gfortran-9 is present on the macOS-11.0 image), and
        # will probably require that the prebuilt openBLAS is updated.
        # xref https://github.com/andyfaff/scipy/pull/28#issuecomment-1203496836
        - [macos-10.15, macosx, x86_64]
        - [macos-12, macosx, arm64]
        - [windows-2019, win, AMD64]

        python: [["cp38", "3.8"], ["cp39", "3.9"], ["cp310", "3.10"], ["cp311", "3.11.0-alpha - 3.11.0"]]
        # python[0] is used to specify the python versions made by cibuildwheel
        # python[1] is installed by actions/setup-python for the separate
        # macosx_arm64 build. Once cibuildwheel can do the macosx_arm64 cross build
        # we can get rid of this duplication and just have ["cp38", "cp39"].
        # The actions/setup-python can only use the form ["3.8"].
        exclude:
          - buildplat: [macos-12, macosx, arm64]
            python: ["cp39", "3.9"]
          - buildplat: [macos-12, macosx, arm64]
            python: ["cp310", "3.10"]
          - buildplat: [macos-12, macosx, arm64]
            python: ["cp311", "3.11.0-alpha - 3.11.0"]
      fail-fast: false

    env:
      IS_32_BIT: ${{ matrix.buildplat[2] == 'x86' }}
      # upload to staging if it's a push to a maintenance branch and the last
      # commit message contains '[wheel build]'
      IS_PUSH: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/maintenance') && contains(needs.get_commit_message.outputs.message, '1') }}
      IS_SCHEDULE_DISPATCH: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: win_amd64 - install rtools
        run: |
          # mingw-w64
          choco install rtools --no-progress
          echo "c:\rtools40\ucrt64\bin;" >> $env:GITHUB_PATH
        if: ${{ runner.os == 'Windows' && env.IS_32_BIT == 'false' }}

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.10.1
        # Build all wheels here, apart from macosx_arm64, linux_aarch64
        # cibuildwheel is currently unable to pass configuration flags to
        # CIBW_BUILD_FRONTEND https://github.com/pypa/cibuildwheel/issues/1227
        # (pip/build). Cross compilation with meson requires an initial
        # configuration step to create a build directory. The subsequent wheel
        # build then needs to use that directory. This can be done with pip
        # using a command like:
        # python -m pip wheel --config-settings builddir=build .
#        if: >-
#          ( ! contains(matrix.buildplat[2], 'arm64' ) )
        env:
          CIBW_BUILD: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}*
          CIBW_ARCHS: ${{ matrix.buildplat[2] }}
          CIBW_ENVIRONMENT_PASS_LINUX: RUNNER_OS

#      - name: Build cp38-macosx_arm64
#        # This is solely used to build cp38-macosx_arm64. As soon as 3.8 is
#        # dropped then this entry can be removed
#        if: ${{ matrix.python[1] == '3.8' && matrix.buildplat[1] == 'macosx' && matrix.buildplat[2] == 'arm64' }}
#        run: |
#          export PLAT="arm64"
#          export _PYTHON_HOST_PLATFORM="macosx-12.0-arm64"
#          export CROSS_COMPILE=1
#          # Need macOS >= 11 for arm compilation.
#          export MACOSX_DEPLOYMENT_TARGET=11.0
#
#          # SDK root needs to be set early, installation of gfortran/openblas
#          # needs to go in the correct location.
#          export SDKROOT=/Applications/Xcode_13.2.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk
#          export ARCHFLAGS=" -arch arm64 "
#
#          # OpenBLAS
#          curl -L https://anaconda.org/multibuild-wheels-staging/openblas-libs/v0.3.20-140-gbfd9c1b5/download/openblas-v0.3.20-140-gbfd9c1b5-macosx_11_0_arm64-gf_f26990f.tar.gz -o openblas.tar.gz
#          sudo tar -xv -C / -f openblas.tar.gz
#          # force a dynamic link, there may be a more elegant way of doing this.
#          sudo rm /opt/arm64-builds/lib/*.a
#
#          export PKG_CONFIG_PATH=/opt/arm64-builds/lib/pkgconfig
#          export PKG_CONFIG=/usr/local/bin/pkg-config
#          export CFLAGS=" -arch arm64 $CFLAGS"
#          export CXXFLAGS=" -arch arm64 $CXXFLAGS"
#          export LD_LIBRARY_PATH="/opt/arm64-builds/lib:$FC_LIBDIR:$LD_LIBRARY_PATH"
#
#          # install dependencies for the build machine
#          pip install meson cython pybind11 pythran ninja oldest-supported-numpy build delocate meson-python
#
#          meson setup --cross-file $(pwd)/tools/wheels/cross_arm64.txt build
#          # use the pip frontend because the build front end does not end up
#          # obeying the configuration flags it's passed.
#          # For example: `python -m build -Cbuilddir=dir` does not end up using
#          # dir as the meson build directory. This is an issue because
#          # the cross-compile specification is contained in that directory.
#          python -m pip wheel -w dist -vvv --config-settings builddir=build .
#
#          # change wheel names from
#          # matscipy-1.10.0.dev0-cp38-cp38-macosx_11_0_arm64.whl
#          # to
#          # matscipy-1.10.0.dev0-cp38-cp38-macosx_12_0_arm64.whl
#          # so they're only installable on Monterey
#          pushd dist
#          rm numpy*.whl
#          for i in *11_0*.whl; do [[ -e ${i/11_0/12_0} ]] || mv "$i" "${i/11_0/12_0}"; done
#          popd
#
#          # The `.so` are all converted to `-rpath/libgfortran` by
#          # gfortran/meson, with all absolute paths removed.
#          # Enables delocate to find the libopenblas/libgfortran libraries.
#          export DYLD_LIBRARY_PATH=/opt/gfortran-darwin-arm64/lib/gcc/arm64-apple-darwin20.0.0/10.2.1:/opt/arm64-builds/lib
#          delocate-listdeps dist/scipy*.whl
#          delocate-wheel --require-archs=arm64 -k -w wheelhouse dist/scipy*.whl

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl
          name: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}

      - name: Release wheels
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: wheelhouse/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check tag
        id: check-tag
        run: |
          if [[ ${{ github.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo ::set-output name=match::true
          fi
        shell: bash

      - name: Deploy to PyPI
        if: steps.check-tag.outputs.match == 'true'
        run: |
          pip install twine
          twine upload wheelhouse/*.whl
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        shell: bash
